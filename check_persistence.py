#!/usr/bin/env python3
"""
Script para verificar que la persistencia de datos funciona correctamente
"""
import os
import sqlite3
import json
from datetime import datetime

def check_database_persistence():
    """Verifica que la base de datos est√© en la ubicaci√≥n correcta y sea persistente"""
    
    # Ruta de la base de datos
    db_path = "/app/data/inventario.db"
    db_dir = "/app/data"
    
    print("üîç Verificando configuraci√≥n de persistencia...")
    print(f"üìÅ Directorio de datos: {db_dir}")
    print(f"üóÑÔ∏è Archivo de base de datos: {db_path}")
    
    # Verificar que el directorio existe
    if not os.path.exists(db_dir):
        print("‚ùå El directorio /app/data no existe")
        return False
    
    print("‚úÖ Directorio /app/data existe")
    
    # Verificar que el archivo de base de datos existe
    if not os.path.exists(db_path):
        print("‚ö†Ô∏è La base de datos no existe a√∫n (se crear√° en el primer uso)")
        return True
    
    print("‚úÖ Base de datos existe")
    
    # Verificar que se puede conectar a la base de datos
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Verificar tablas
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        
        print(f"üìä Tablas encontradas: {len(tables)}")
        for table in tables:
            print(f"  - {table[0]}")
        
        # Verificar datos
        cursor.execute("SELECT COUNT(*) FROM inventario")
        inventario_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM reputacion")
        reputacion_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM historial")
        historial_count = cursor.fetchone()[0]
        
        print(f"üì¶ Items en inventario: {inventario_count}")
        print(f"üë• Usuarios con reputaci√≥n: {reputacion_count}")
        print(f"üìú Entradas en historial: {historial_count}")
        
        conn.close()
        print("‚úÖ Base de datos accesible y funcional")
        return True
        
    except Exception as e:
        print(f"‚ùå Error al acceder a la base de datos: {e}")
        return False

def create_test_data():
    """Crea datos de prueba para verificar persistencia"""
    db_path = "/app/data/inventario.db"
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Crear tablas si no existen
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS inventario (
                item TEXT PRIMARY KEY,
                cantidad INTEGER NOT NULL DEFAULT 0
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS reputacion (
                user_id INTEGER PRIMARY KEY,
                puntos REAL NOT NULL DEFAULT 0
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS historial (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                timestamp TEXT,
                accion TEXT,
                item TEXT,
                cantidad REAL,
                ubicacion TEXT,
                usuario_relacionado TEXT
            )
        ''')
        
        # Insertar datos de prueba
        cursor.execute("INSERT OR REPLACE INTO inventario (item, cantidad) VALUES (?, ?)", 
                      ("test_item", 10))
        
        cursor.execute("INSERT OR REPLACE INTO reputacion (user_id, puntos) VALUES (?, ?)", 
                      (123456789, 5.5))
        
        timestamp = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        cursor.execute("INSERT INTO historial (user_id, timestamp, accion, item, cantidad, ubicacion) VALUES (?, ?, ?, ?, ?, ?)", 
                      (123456789, timestamp, "Test", "test_item", 1, "Test Location"))
        
        conn.commit()
        conn.close()
        
        print("‚úÖ Datos de prueba creados correctamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error al crear datos de prueba: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Verificador de persistencia de datos")
    print("=" * 50)
    
    # Verificar configuraci√≥n
    if check_database_persistence():
        print("\n‚úÖ La configuraci√≥n de persistencia est√° correcta")
        
        # Crear datos de prueba
        print("\nüß™ Creando datos de prueba...")
        if create_test_data():
            print("\nüéâ ¬°Todo configurado correctamente!")
            print("üí° Los datos ahora se mantendr√°n entre reinicios del bot")
        else:
            print("\n‚ùå Error al crear datos de prueba")
    else:
        print("\n‚ùå La configuraci√≥n de persistencia tiene problemas")
        print("üí° Aseg√∫rate de que Railway Volume est√© configurado correctamente")
